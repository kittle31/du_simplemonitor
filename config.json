{
"slots":{
"0":{"name":"slot1","type":{"events":[],"methods":[]}},
"1":{"name":"slot2","type":{"events":[],"methods":[]}},
"2":{"name":"slot3","type":{"events":[],"methods":[]}},
"3":{"name":"slot4","type":{"events":[],"methods":[]}},
"4":{"name":"slot5","type":{"events":[],"methods":[]}},
"5":{"name":"slot6","type":{"events":[],"methods":[]}},
"6":{"name":"slot7","type":{"events":[],"methods":[]}},
"7":{"name":"slot8","type":{"events":[],"methods":[]}},
"8":{"name":"slot9","type":{"events":[],"methods":[]}},
"9":{"name":"slot10","type":{"events":[],"methods":[]}},
"-1":{"name":"unit","type":{"events":[],"methods":[]}},
"-2":{"name":"system","type":{"events":[],"methods":[]}},
"-3":{"name":"library","type":{"events":[],"methods":[]}}
},"handlers":[{"code":"screenLabel = \"Raw Ore\" --export : label for top of screen\nfontsize = 10\nthreshold = 10000   --export : line turns red when less than this\n\nindexes = {}\ntypeWeights = {\n-- T1\n  coal = 1.35,\n  quartz = 2.65,\n  hematite = 5.04,\n  bauxite = 1.28,\n\n  carbon = 2.27,\n  silicon = 1.0,\n  iron = 1.0,\n  aluminum = 1.0,\n-- T2\n  malachite = 4.0,\n  natron = 1.55,\n  limestone = 2.71,\n  chromite = 4.54,\n\n  copper = 8.96,\n  sodium = 0.97,\n  calcium = 1.55,\n  chromium = 1.0,\n-- T3\n  petalite = 2.41,\n  pyrite = 5.01,\n  acanthite = 7.20\n}\ntypeWeights[\"warp cell\"] = 100\ntypeWeights[\"al fe alloy\"] = 7.5\ntypeWeights[\"calcium copper\"] = 8.10\ntypeWeights[\"cu ag alloy\"] = 9.20\ntypeWeights[\"aileron m\"] = 3140\ntypeWeights[\"atmospheric airbrake m\"] = 285.25\ntypeWeights[\"basic space engine m\"] = 4090\ntypeWeights[\"medium adjustor\"] = 220.38\ntypeWeights[\"medium atmo engine\"] = 2980\ntypeWeights[\"stabilizer m\"] = 2030\ntypeWeights[\"wing m\"] = 1700\ntypeWeights[\"wing variant m\"] = 1700\n\nfunction unrequire(m)\n    package.loaded[m] = nil\n    _G[m] = nil\nend\nunrequire'json'\nunrequire'Navigator'\nunrequire'Helpers'\nunrequire'AxisCommand'\nunrequire'database'\nunrequire'cpml/sgui'\nunrequire'pl/init'\n\ncore = null\nscreen = null\n\nfunction findWeight(name)\n    n=string.lower(name)\n    for key,value in pairs(typeWeights) do\n        found = string.find(name, key)\n        if found ~= nil then\n          return value\n        end\n    end\n    return 1\nend\n\nfunction startup()\n    for key, value in pairs(unit) do\n        if type(value) == \"table\" and type(value.export) == \"table\" then\n            if value.getElementClass then\n                cls = value.getElementClass()\n                if cls == \"CoreUnit\" or cls == \"CoreUnitSpace\" then\n                    core = value\n                end\n                if cls == \"ScreenUnit\" then\n                    screen = value\n                end\n            end\n        end\n    end\n    if core == null then\n        system.print(\"ERR: Core link not found\")\n        unit.exit()\n        return\n    end\n    if screen == null then\n        system.print(\"ERR: Screen link not found\")\n        unit.exit()\n        return\n    end\n\n    links = {}\n    linkSize = 1\n    for key, value in pairs(unit) do\n        if type(value) == \"table\" and type(value.export) == \"table\" then\n            if value.getElementClass then\n                cls = value.getElementClass()\n                if cls == 'ItemContainer' then\n                    id = value.getId()\n                    name = string.lower(core.getElementNameById(id))\n                    weight = findWeight(name)\n                    r = { value=value, name=name, mass=0, weight=weight}\n                    links[linkSize] = r\n                    linkSize = linkSize + 1\n                end\n            end\n        end\n    end\n    linkSize = linkSize - 1\n\n    table.sort(links, function(a,b) return a.name < b.name end)\n    unit.setTimer(\"Monitor\", 5)\n    unit.hide()\n    screen.clear()\n    screen.addContent(1, 0, \"<div style=\\\"text-align: center; font-face:Arial;font-size: \"..fontsize..\"vh; border-bottom: 3px solid white; width: 100vw\\\">\"..screenLabel..\"</div>\")\nend\n\nfunction formatComma(num)\n    return formatStr(num..\"\")\nend\n\nfunction formatStr(val)\n    if string.len(val) <= 3 then\n        return val\n    end\n\n    right = string.sub(val, string.len(val)-2)\n    left = string.sub(val, 0,string.len(val)-3)\n    return formatComma(left) ..\",\"..right\nend\n\nfunction getReportLine(labelStr, container, weight, mass)\n    amtInt = math.floor(mass / weight)\n    amount = formatComma(amtInt)\n    color = \"\"\n    if (amtInt < 5) then\n        color = \"background-color: red\"\n    end\n    label = labelStr:gsub(\"^%l\", string.upper)\n    labelDiv = \"<div style=\\\"width: 65vw;text-align: left;\\\">\"..label..\"</div>\"\n    amountDiv =\"<div style=\\\"width: 25vw;text-align: right;\\\">\"..amount..\" </div>\"\n    return \"<div style=\\\"padding-left: 20px; font-family:Arial; font-size: \"..(fontsize-1)..\"vh; display: flex; flex-direction: row;\"..color..\"\\\">\"..labelDiv..\" \"..amountDiv..\"</div>\"\nend\n\n\nfunction monitor()\n    for idx=1,linkSize do\n        rec = links[idx]\n        mass = rec.value.getItemsMass()\n        if mass == null then\n           system.print(\"out of range, stopping\")\n           unit.exit()\n           return\n        end\n        if rec.mass ~= mass then\n            rec.mass = mass\n            line = getReportLine(rec.name, rec.value, rec.weight, mass)\n\n            lineID = indexes[idx]\n            if lineID == null then\n                height = idx * (fontsize + 1)\n                lineID = screen.addContent(1, height, line)\n                indexes[idx] = lineID\n            else\n                screen.resetContent(lineID, line)\n            end\n        end\n    end\nend\n\n\nstartup()\nmonitor()\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"monitor()","filter":{"args":[{"value":"Monitor"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]
}
