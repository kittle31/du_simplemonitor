{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit:triggerEvent('onStop')","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"18"},{"code":"unit:triggerEvent('onTimer',timerId)","filter":{"args":[{"variable":"*"}],"signature":"onTimer(timerId)","slotKey":"-1"},"key":"19"},{"code":"\n\nscreenLabel=\"Ore\"--export: : label for top of screen\nthreshold=10000--export: : line turns red when less than this\ndebug = false\n\ncore = null\nscreen = null\n\nfunction log(msg)\n  if debug then\n    system.print(msg)\n  end\nend\n\nfunction startup()\n  log(\"search for core and screen\")\n  local valid = true\n  for linkName, element in pairs(library.getLinks()) do\n    local cls = element.getClass()\n    if element.setRenderScript then\n      screen = element\n    end\n    if element.getElementNameById then\n      core = element\n    end\n    log(string.format('Found link `%s` of type `%s`', linkName, cls))\n  end\n\n  if core == null then\n    system.print(\"ERR: Core link not found\")\n    valid = false\n  end\n  if screen == null then\n    system.print(\"ERR: Screen link not found\")\n    valid = false\n  end\n\n  if not valid then\n    system.print(\"------------------------\")\n    system.print(\"Required Links not found\")\n    system.print(\"link to the core\")\n    system.print(\"link to ONE screen\")\n    system.print(\"link up to 8 containers\")\n    system.print(\"------------------------\")\n    system.print(\"links can be in any order\")\n    unit.exit()\n    return\n  end\n\n  links = {}\n  log(\"search for containers\")\n  for _, element in pairs(library.getLinks()) do\n    if element.getClass then\n      local cls = element.getClass()\n      log(cls)\n      if string.find(cls, \"Container\") then\n        local id = element.getLocalId()\n        local name = string.lower(core.getElementNameById(id))\n        links[#links+1] = { value=element, name=name, vol=-1}\n      end\n    end\n  end\n  if #links == 0 then\n    system.print(\"Cannot find any container links\")\n    unit.exit()\n  end\n\n  table.sort(links, function(a,b) return a.name < b.name end)\n  unit.setTimer(\"monitor\", 5)\n  if debug == false then\n    unit.hideWidget()\n  end\n\n  unit:onEvent(\"onTimer\", function (self, timerId)\n    if timerId == \"monitor\" then\n      monitor()\n    end\n  end)\n\n  local renderScript = 'function DrawGrid(header, rows, startX, startY, layer, font)\\n    local rowHeight = header.rowHeight or 30\\n    local currX = startX\\n    local currY = startY+rowHeight\\n\\n    --header\\n    local columns = header.columns\\n    local skipHeader = header.skipHeader or false\\n    if not skipHeader then\\n        for cIdx=1,#columns do\\n            if columns[cIdx].title then\\n                if columns[cIdx].titleColor then\\n                    setNextFillColor(layer, columns[cIdx].titleColor[1], columns[cIdx].titleColor[2], columns[cIdx].titleColor[3], 1)\\n                else\\n                    setNextFillColor(layer, 1,1,1,1)\\n                end\\n                setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\\n                addText(layer, font, columns[cIdx].title, currX, currY - (rowHeight/2))\\n            end\\n            currX = currX + columns[cIdx].width\\n        end\\n        setNextStrokeWidth(layer, 1)\\n        setNextStrokeColor(layer, 1,1,1,1)\\n        setNextFillColor(layer, 0,0,0,0)\\n        addBox(layer, startX, startY,currX-startX,rowHeight)\\n        currY = currY + rowHeight\\n    end\\n\\n    --cols\\n    for rIdx=1,#rows do\\n        currX = startX\\n        local currRow = rows[rIdx]\\n        for cIdx=1,#columns do\\n            if columns[cIdx].type == \"txt\" then\\n                local alignH = AlignH_Left\\n                if columns[cIdx].align and columns[cIdx].align == \"right\" then\\n                    alignH = AlignH_Right\\n                end\\n                setNextTextAlign(layer, alignH, AlignV_Middle)\\n                if currRow.color then\\n                    setNextFillColor(layer, currRow.color[1],currRow.color[2],currRow.color[3], 1)\\n                else\\n                    if columns[cIdx].titleColor then\\n                        setNextFillColor(layer, columns[cIdx].titleColor[1], columns[cIdx].titleColor[2], columns[cIdx].titleColor[3], 1)\\n                    else\\n                        setNextFillColor(layer, 1,1,1,1)\\n                    end\\n                end\\n                if alignH == AlignH_Left then\\n                    addText(layer,font, currRow.data[cIdx],currX, currY-(rowHeight/2))\\n                else\\n                    if alignH == AlignH_Right then\\n                        addText(layer,font, currRow.data[cIdx],currX+ columns[cIdx].width, currY-(rowHeight/2))\\n                    end\\n                end\\n            end\\n            if columns[cIdx].type == \"img\" then\\n                addImage(layer, currRow.data[cIdx], currX, currY-(rowHeight*0.9), rowHeight*0.8,rowHeight*0.8)\\n            end\\n            currX=currX+ columns[cIdx].width\\n        end\\n        if header.dividers then\\n            setNextStrokeWidth(layer, 0.25)\\n            setNextStrokeColor(layer, 1,1,1,1)\\n            addLine(layer, startX,currY, currX,currY)\\n        end\\n        currY=currY+rowHeight\\n    end\\nend\\n\\nfunction mysplit(inputstr, sep)\\n    if sep == nil then\\n        sep = \"%s\"\\n    end\\n    local t={}\\n    for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\\n        table.insert(t, str)\\n    end\\n    return t\\nend\\n\\nlocal rx, ry = getResolution()\\nlocal vw = rx/100\\nlocal vh = ry/100\\nlocal layer = createLayer()\\nlocal font = loadFont(\"Play\", vh*10)\\n\\nif not _init then\\n    gridHeader = {\\n        skipHeader=true,\\n        columns={\\n            {width=vw*70, type=\"txt\" },\\n            {width=vw*25, type=\"txt\", align=\"right\"}\\n        },\\n        rowHeight = vh * 11\\n    }\\n    _init = true\\nend\\n\\nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle)\\naddText(layer, font, screenTitle, vw*50, vh*5)\\n\\nsetNextStrokeWidth(layer, 1.5)\\nsetNextStrokeColor(layer, 1,1,1,1)\\naddLine(layer, 0,vh*10, rx,vh*10)\\n\\nlocal payload = getInput()\\n\\nlocal gridRows = {}\\nfor idx, row in pairs(mysplit(payload, \"$\")) do\\n    logMessage(\"idx \"..tostring(idx)..\" v \"..tostring(row))\\n    local cols = mysplit(row, \"#\")\\n    local gridRow = {data=cols}\\n    if cols[3] == \"1\" then\\n        gridRow.color = {1,0,0}\\n    end\\n    gridRows[#gridRows+1] = gridRow\\nend\\nDrawGrid(gridHeader, gridRows, vh, vh*11, layer, font)'\n  renderScript = 'local screenTitle=\"' .. screenLabel .. '\"\\n' .. renderScript\n  screen.setRenderScript(renderScript)\n  screen.activate()\nend\n\nfunction formatComma(num)\n  return formatStr(num..\"\")\nend\n\nfunction formatStr(val)\n  if string.len(val) <= 3 then\n    return val\n  end\n\n  right = string.sub(val, string.len(val)-2)\n  left = string.sub(val, 0,string.len(val)-3)\n  return formatComma(left) ..\",\"..right\nend\n\nfunction reportLine(rec)\n  local amtInt = math.floor(rec.vol)\n  local amount = formatComma(amtInt)\n  local label = rec.name:gsub(\"^%l\", string.upper)\n  local flag = \"0\"\n  if (amtInt < threshold) then\n    flag = \"1\"\n  end\n  return label..\"#\"..amount..\"#\"..flag\nend\n\nfunction monitor()\n  local payload = \"\"\n  for _, rec in pairs(links) do\n    local vol = rec.value.getItemsVolume()\n    if vol == null then\n      system.print(\"out of range, stopping\")\n      unit.exit()\n      return\n    end\n    log(\"monitor \"..rec.name..\" v:\"..vol)\n    rec.vol = vol\n    local line = reportLine(rec)\n    payload = payload .. line .. \"$\"\n  end\n  screen.setScriptInput(payload)\nend\n\nstartup()\nmonitor()\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"20"},{"code":"function library.addEventHandlers(a)if not a or a.onEvent and a.triggerEvent then return false end;local b,c,d='table','function','thread'if b~=type(a)then error('You can only add event handlers to table objects!')end;local e={}local function f(a)local g=type(a)return c==g or b==g and f(getmetatable(a).__call)or d==g end;a.onEvent=function(self,h,i,j)if not f(i)then error('Event handler must be a function, a callable object or a thread!')end;j=j or self;if b~=type(j)then error('The value of self must be a table!')end;if not e[h]then e[h]={_=0}end;local k=d==type(i)and function(...)coroutine.resume(i,...)end or i;local i=e[h]local l=i._+1;i[l]={k,j}i._=l;return l end;a.clearEvent=function(self,h,m)if e[h]and e[h][m]then e[h][m]=nil end end;a.triggerEvent=function(self,h,...)local n=e[h]if n then for o=1,n._ do local i=n[o]if i then i[1](i[2],...)end end end end;return true end","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"0"},{"code":"local a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;local e=0;for f,g in pairs(unit)do if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false end end;if h then e=e+1;if c then f=e end;d[f]=g end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,g in pairs(d)do if l==m.getElementNameById(g.getLocalId())then return g end end end","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"1"},{"code":"","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"2"},{"code":"library.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"}],"methods":[],"events":[]}